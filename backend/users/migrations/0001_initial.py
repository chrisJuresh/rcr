# Generated by Django 5.0.2 on 2024-03-17 01:52

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('roles', '0001_initial'),
        ('specialities', '0001_initial'),
        ('trusts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UnauthenticatedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('password', models.CharField(max_length=128)),
                ('token', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('title', models.CharField(blank=True, max_length=4, verbose_name='Title')),
                ('trust_approved', models.BooleanField(default=False, verbose_name='Trust Approved')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('trust', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='trusts.trust', verbose_name='Trust')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested', models.BooleanField(default=False, verbose_name='Role Requested')),
                ('approved', models.BooleanField(default=False, verbose_name='Role Approved')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_users', to='roles.role', verbose_name='Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(blank=True, related_name='users', through='users.UserRole', to='roles.role', verbose_name='User Roles'),
        ),
        migrations.CreateModel(
            name='RepresentativeInfo',
            fields=[
                ('user_role', models.OneToOneField(limit_choices_to={'role__name': 'REPRESENTATIVE'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='users.userrole', verbose_name='User Role')),
                ('specialities', models.ManyToManyField(blank=True, to='specialities.speciality')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewerInfo',
            fields=[
                ('user_role', models.OneToOneField(limit_choices_to={'role__name': 'REVIEWER'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='users.userrole', verbose_name='User Role')),
                ('specialities', models.ManyToManyField(blank=True, to='specialities.speciality')),
            ],
        ),
        migrations.AddConstraint(
            model_name='userrole',
            constraint=models.UniqueConstraint(fields=('user', 'role'), name='unique_user_role'),
        ),
    ]
